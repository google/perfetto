/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package perfetto.protos;

import "protos/perfetto/trace/android/inputmethodservice/inputmethodservice.proto";
import "protos/perfetto/trace/android/server/inputmethod/inputmethodmanagerservice.proto";
import "protos/perfetto/trace/android/view/inputmethod/inputmethodmanager.proto";
import "protos/perfetto/trace/android/view/viewrootimpl.proto";
import "protos/perfetto/trace/android/view/insetscontroller.proto";
import "protos/perfetto/trace/android/view/imeinsetssourceconsumer.proto";
import "protos/perfetto/trace/android/view/inputmethod/editorinfo.proto";
import "protos/perfetto/trace/android/view/inputmethod/inputconnection.proto";
import "protos/perfetto/trace/android/view/imefocuscontroller.proto";

// One dump entry for clients that use InputMethod
message InputMethodClientsTraceProto {
  // elapsed realtime in nanos since boot of when this entry was logged
  optional fixed64 elapsed_realtime_nanos = 1;

  // where the trace originated
  optional string where = 2;

  optional ClientSideProto client = 3;

  // groups together the dump from ime related client side classes
  message ClientSideProto {
    optional int32 display_id = 1;
    optional InputMethodManagerProto input_method_manager = 2;
    optional ViewRootImplProto view_root_impl = 3;
    optional InsetsControllerProto insets_controller = 4;
    optional ImeInsetsSourceConsumerProto ime_insets_source_consumer = 5;
    optional EditorInfoProto editor_info = 6;
    optional ImeFocusControllerProto ime_focus_controller = 7;
    optional InputConnectionProto input_connection = 8;
    optional InputConnectionCallProto input_connection_call = 9;
  }
}

// One dump entry for InputMethodService
message InputMethodServiceTraceProto {
  // elapsed realtime in nanos since boot of when this entry was logged
  optional fixed64 elapsed_realtime_nanos = 1;

  // where the trace originated
  optional string where = 2;

  optional InputMethodServiceProto input_method_service = 3;
}

// One dump entry for InputMethodManagerService
message InputMethodManagerServiceTraceProto {
  // elapsed realtime in nanos since boot of when this entry was logged
  optional fixed64 elapsed_realtime_nanos = 1;

  // where the trace originated
  optional string where = 2;

  optional InputMethodManagerServiceProto input_method_manager_service = 3;
}

// Represents a file full of trace entries for clients that use InputMethod.
// Encoded, it should start with 0x9 0x49 0x4d 0x43 0x54 0x52 0x41 0x43 0x45
// (.IMCTRACE), such that they can be easily identified.
message InputMethodClientsTraceFileProto {
  // constant; MAGIC_NUMBER = (long) MAGIC_NUMBER_H << 32 |
  // MagicNumber.MAGIC_NUMBER_L (this is needed because enums have to be 32 bits
  // and there's no nice way to put 64bit
  //  constants into .proto files.)
  enum MagicNumber {
    INVALID = 0;
    // IMCT (little-endian ASCII)
    MAGIC_NUMBER_L = 0x54434d49;
    // RACE (little-endian ASCII)
    MAGIC_NUMBER_H = 0x45434152;
  }

  // Must be the first field to allow winscope to auto-detect the dump type. Set
  // to value in MagicNumber
  optional fixed64 magic_number = 1;
  repeated InputMethodClientsTraceProto entry = 2;

  // offset between real-time clock and elapsed time clock in nanoseconds.
  // Calculated as: 1000000 * System.currentTimeMillis() -
  // SystemClock.elapsedRealtimeNanos()
  optional fixed64 real_to_elapsed_time_offset_nanos = 3;
}

// Represents a file full of InputMethodService trace entries.
// Encoded, it should start with 0x9 0x49 0x4d 0x53 0x54 0x52 0x41 0x43 0x45
// (.IMSTRACE), such that they can be easily identified.
message InputMethodServiceTraceFileProto {
  // constant; MAGIC_NUMBER = (long) MAGIC_NUMBER_H << 32 |
  // MagicNumber.MAGIC_NUMBER_L (this is needed because enums have to be 32 bits
  // and there's no nice way to put 64bit
  //  constants into .proto files.)
  enum MagicNumber {
    INVALID = 0;
    // IMST (little-endian ASCII)
    MAGIC_NUMBER_L = 0x54534d49;
    // RACE (little-endian ASCII)
    MAGIC_NUMBER_H = 0x45434152;
  }

  // Must be the first field to allow winscope to auto-detect the dump type. Set
  // to value in MagicNumber
  optional fixed64 magic_number = 1;
  repeated InputMethodServiceTraceProto entry = 2;

  // offset between real-time clock and elapsed time clock in nanoseconds.
  // Calculated as: 1000000 * System.currentTimeMillis() -
  // SystemClock.elapsedRealtimeNanos()
  optional fixed64 real_to_elapsed_time_offset_nanos = 3;
}

// Represents a file full of InputMethodManagerService trace entries.
// Encoded, it should start with 0x9 0x49 0x4d 0x4d 0x54 0x52 0x41 0x43 0x45
// (.IMMTRACE), such that they can be easily identified.
message InputMethodManagerServiceTraceFileProto {
  // constant; MAGIC_NUMBER = (long) MAGIC_NUMBER_H << 32 |
  // MagicNumber.MAGIC_NUMBER_L (this is needed because enums have to be 32 bits
  // and there's no nice way to put 64bit
  //  constants into .proto files.)
  enum MagicNumber {
    INVALID = 0;
    // IMMT (little-endian ASCII)
    MAGIC_NUMBER_L = 0x544d4d49;
    // RACE (little-endian ASCII)
    MAGIC_NUMBER_H = 0x45434152;
  }

  // Must be the first field to allow winscope to auto-detect the dump type. Set
  // to value in MagicNumber
  optional fixed64 magic_number = 1;
  repeated InputMethodManagerServiceTraceProto entry = 2;

  // offset between real-time clock and elapsed time clock in nanoseconds.
  // Calculated as: 1000000 * System.currentTimeMillis() -
  // SystemClock.elapsedRealtimeNanos()
  optional fixed64 real_to_elapsed_time_offset_nanos = 3;
}
