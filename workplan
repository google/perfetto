# Work Plan: Specialized Storage Optimizations

## 1. Motivation

The goal of this feature is to significantly improve the performance of equality filters (`WHERE col = ?`) in the trace processor's dataframe engine. Currently, a highly effective optimization (`SmallValueEq`) exists for columns that are sorted, non-null, have no duplicates, and contain a small range of integer values.

This work plan extends this concept to two common scenarios that are not currently optimized:
1.  Columns with a small range of unique integer values that are **not sorted**.
2.  Columns with a small range of integer values that are **not sorted and contain duplicates**.

By implementing specialized storage representations for these cases, we can replace slow, linear scans of the column data with highly efficient, near-O(1) lookups, leading to substantial performance gains in queries that frequently filter on such columns (e.g., joining tables on IDs that are not perfectly sorted).

## 2. High-Level Plan

The implementation will follow the existing pattern established by the `SmallValueEq` optimization. The core idea is to create a complete vertical slice of functionality for each new optimization.

1.  **Define New Storage Structs:** Create new data structures in `types.h` to represent the optimized in-memory layout for each new case.
2.  **Enhance the Column Builder:** Modify the `AdhocDataframeBuilder` to automatically detect when a column's data fits the criteria for one of the new optimizations. When it does, it will build and attach the corresponding specialized storage object to the column.
3.  **Update the Query Planner:** Teach the query planner to recognize when a column has one of the new specialized storage types. When it sees an equality filter on such a column, it will emit a new, dedicated bytecode instruction instead of the generic filter instruction.
4.  **Implement Interpreter Logic:** Implement the corresponding functions in the bytecode interpreter to execute these new instructions. This is the "fast path" that performs the highly efficient lookup using the specialized data structure.
5.  **Comprehensive Testing:** Add unit tests to verify the builder logic and the interpreter's correctness, and add end-to-end tests to ensure the entire pipeline works as expected.

## 3. Current Status & Blockers

The core implementation is complete, including changes to `types.h`, `adhoc_dataframe_builder.h`, `bytecode_instructions.h`, `bytecode_interpreter_impl.h`, and `query_plan.cc`. Unit tests for the new interpreter functions have also been added.

However, the project is currently blocked by failing unit tests:
1.  **`AdhocDataframeBuilder.BuildSmallValueEq` is failing:** The test expects a different `value_to_indices_start` vector than what the builder is producing. This points to a logic error in the `BuildSmallValueEq` function within `adhoc_dataframe_builder.h` that needs to be fixed.
2.  **Unrelated Test Failures:** The test suite is also crashing in `BytecodeInterpreterTest_IndexPermutationVectorToSpan_Empty_Test` and failing in `DataframeBytecodeTest.SortingOfFilters`. These appear to be pre-existing issues exposed by the recent changes. While not directly related to the specialized storage feature, they are preventing the unit tests from passing and need to be investigated if they persist after the primary bug is fixed.

The immediate next step is to debug and fix the implementation of `AdhocDataframeBuilder::BuildSmallValueEq`.

## 4. TODO List

- [x] **Step 1:** Modify `src/trace_processor/dataframe/impl/types.h`
- [x] **Step 2:** Modify `src/trace_processor/dataframe/adhoc_dataframe_builder.h`
- [x] **Step 3.1:** Modify `src/trace_processor/dataframe/impl/query_plan.cc`
- [x] **Step 3.2:** Modify `src/trace_processor/dataframe/impl/bytecode_instructions.h`
- [x] **Step 4:** Modify `src/trace_processor/dataframe/impl/bytecode_interpreter_impl.h`
- [x] **Step 5.1:** Add unit tests for `AdhocDataframeBuilder`
- [x] **Step 5.2:** Add unit tests for new interpreter functions
- [ ] **Step 5.3:** Fix `AdhocDataframeBuilder::BuildSmallValueEq` implementation.
- [ ] **Step 5.4:** Add end-to-end TPQL tests
- [ ] **Step 6:** Review and submit all changes.