# Sequence 1 defaults to track for "t1".
packet {
  trusted_packet_sequence_id: 1
  timestamp: 0
  incremental_state_cleared: true
  first_packet_on_sequence: true
  track_descriptor {
    uuid: 1
    parent_uuid: 10
    sibling_order_rank: -10
  }
  trace_packet_defaults {
    track_event_defaults {
      track_uuid: 1
    }
  }
}
# Sequence 2 defaults to track for "t2".
packet {
  trusted_packet_sequence_id: 2
  timestamp: 0
  incremental_state_cleared: true
  first_packet_on_sequence: true
  track_descriptor {
    uuid: 2
    parent_uuid: 10
    sibling_order_rank: -2
  }
  trace_packet_defaults {
    track_event_defaults {
      track_uuid: 2
    }
  }
}
# Both thread tracks are nested underneath this process track.
packet {
  trusted_packet_sequence_id: 1
  timestamp: 0
  track_descriptor {
    uuid: 10
    process {
      pid: 5
      process_name: "p1"
    }
    child_ordering: 3
    chrome_process {
      host_app_package_name: "host_app"
    }
  }
}
# And we have an async track underneath the process too.
packet {
  trusted_packet_sequence_id: 1
  timestamp: 0
  track_descriptor {
    uuid: 11
    parent_uuid: 10
    name: "async"
    sibling_order_rank: 1
  }
}
packet {
  trusted_packet_sequence_id: 1
  timestamp: 100
  track_descriptor {
    uuid: 12
    parent_uuid: 10
    name: "async2"
    sibling_order_rank: 2
  }
}
packet {
  trusted_packet_sequence_id: 2
  timestamp: 200
  track_descriptor {
    uuid: 12
    parent_uuid: 10
    name: "async2"
  }
}

# Threads also can have child async tracks.
packet {
  trusted_packet_sequence_id: 1
  timestamp: 200
  track_descriptor {
    uuid: 14
    parent_uuid: 2
    name: "async3"
  }
}
# If we later see another track descriptor for tid 1, but with a different uuid,
# we should detect tid reuse and start a new thread.
packet {
  trusted_packet_sequence_id: 3
  timestamp: 10000
  incremental_state_cleared: true
  first_packet_on_sequence: true
  track_descriptor {
    uuid: 3
    parent_uuid: 10
  }
}
# Should appear on t3.
packet {
  trusted_packet_sequence_id: 3
  timestamp: 11000
  track_event {
    track_uuid: 3
    categories: "cat"
    name: "event1_on_t3"
    type: 3
  }
}
# If we later see another track descriptor for pid 5, but with a different uuid,
# we should detect pid reuse and start a new process.
packet {
  trusted_packet_sequence_id: 4
  timestamp: 20000
  incremental_state_cleared: true
  track_descriptor {
    uuid: 20
    process {
      pid: 5
      process_name: "p2"
    }
  }
}
packet {
  trusted_packet_sequence_id: 4
  timestamp: 22000
  incremental_state_cleared: true
  track_descriptor {
    uuid: 21
    parent_uuid: 20
  }
}
