# Copyright (C) 2025 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: run install-build-deps (with caching)
description: Restore and conditionally save the buildtools cache
inputs:
  install-flags:
    required: false
    description: Optional flags to pass to install-build-deps (e.g., --android)

runs:
  using: "composite"
  steps:
    - name: Setup Google Cloud config
      shell: bash
      run: |
        # Setup Google Cloud config
        # Token is generated in 'infra/ci/worker/sandbox_runner.py'
        gcloud config set auth/access_token_file $SVC_TOKEN_PATH
        # Suppress warning about "parallel composite upload" when using 'storage cp --storage-class=STANDARD'
        gcloud config set storage/parallel_composite_upload_enabled True

    - name: Compute cache key
      id: cachekey
      shell: bash
      run: |
        # Replace spaces with underscores to keep the cache key valid
        flags="${{ inputs.install-flags }}"
        if [ -z "$flags" ]; then
          echo "flags_key=default" >> "$GITHUB_OUTPUT"
        else
          echo "flags_key=$(echo "$flags" | tr ' -' '_')" >> "$GITHUB_OUTPUT"
        fi

    # When restoring the buildtools cache, we don't want to overwrite files or folders that are stored in git.
    - name: Generate list of files to ignore
      id: files_to_ignore
      shell: bash
      run: |
        # Generate list of files in 'buildtools/' stored in git.
        FILES_TO_IGNORE_PATH=$(mktemp /tmp/files-to-ignore-XXXXX.txt)
        git ls-tree HEAD:buildtools --name-only > "$FILES_TO_IGNORE_PATH"
        echo "file_path=$FILES_TO_IGNORE_PATH" >> "$GITHUB_OUTPUT"

    - name: Restore buildtools from cache
      id: restore_buildtools_cache
      shell: bash
      env:
        GCS_BUCKET: gs://perfetto-ci-artifacts
        CACHE_PATH: cache/buildtools-${{ steps.cachekey.outputs.flags_key }}/buildtools.tar
        FILES_TO_IGNORE_PATH: ${{ steps.files_to_ignore.outputs.file_path }}
      run: |
        # Restore content of 'buildtools/' folder from cache.
        CACHED_TAR_PATH=$(mktemp /tmp/buildtools-cache-XXXXXX.tar)
        cp_output=""
        if cp_output=$(gcloud storage cp "$GCS_BUCKET/$CACHE_PATH" "$CACHED_TAR_PATH" 2>&1); then
          echo "$cp_output"
        
          # '--exclude-from' is used to not overwrite files or folders that are stored in git. 
          # '--keep-old-files' flag causes 'tar' to fail instead of overwriting files.             
          tar --keep-old-files --preserve-permissions --extract --exclude-from="$FILES_TO_IGNORE_PATH" --file="$CACHED_TAR_PATH" --directory=buildtools
        
          # Calculate hash of the entire cache archive to later decide if we need to upload the newer version.
          CACHE_SHA256=$(tar --extract --to-stdout --file="$CACHED_TAR_PATH" | sha256sum | awk '{print $1}')        
          echo "cache_sha256=$CACHE_SHA256" >> "$GITHUB_OUTPUT"
        
          rm "$CACHED_TAR_PATH"
        
          echo "Cache restored, OK"
        elif [[ "$cp_output" =~ "The following URLs matched no objects or files" ]]; then
          echo "Cache not found, OK"
        else
          echo "Can't download cache: $cp_output"
        fi

    - name: Run install-build-deps
      shell: bash
      # 'tools/install-build-deps' script will check the hashes and download the correct deps if the restored cache is too old or too new.
      run: tools/install-build-deps ${{ inputs.install-flags }}

    - name: Save buildtools cache (only on main)
      if: github.ref == 'refs/heads/main'
      shell: bash
      env:
        GCS_BUCKET: gs://perfetto-ci-artifacts
        CACHE_PATH: cache/buildtools-${{ steps.cachekey.outputs.flags_key }}/buildtools.tar
        FILES_TO_IGNORE_PATH: ${{ steps.files_to_ignore.outputs.file_path }}
        CACHE_SHA256: ${{ steps.restore_buildtools_cache.outputs.cache_sha256 }}
      run: |
        # Save content of 'buildtools/' folder to cache.
        TAR_PATH=$(mktemp /tmp/buildtools-XXXXXX.tar)

        # '--exclude-from' is used to not cache files or folders that are stored in git.
        # '--sort=name' is used to calculate reproducible sha256sum.
        tar --create --sort=name --preserve-permissions --exclude-from="$FILES_TO_IGNORE_PATH" --file="$TAR_PATH" --directory=buildtools .
        
        NEW_CACHE_SHA256=$(tar --extract --to-stdout --file="$TAR_PATH" | sha256sum | awk '{print $1}')
        
        # Content of 'buildtools/' rarely changes, no need to upload the cache it on each build, even if nothing changes.
        if [[ "$CACHE_SHA256" != "$NEW_CACHE_SHA256" ]]; then
          gcloud storage cp --storage-class=STANDARD "$TAR_PATH" "$GCS_BUCKET/$CACHE_PATH"
        else
          echo "The buildtools cache doesn't change, no need to upload it."
        fi
        
        rm "$TAR_PATH"