# Copyright (C) 2025 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This workflow requires that pull requests coming from a forked repo (hence
# non-googlers) have 2 reviews from repo collaborators.
# This workflow is triggered by trigger-require-two-reviewers-for-fork-prs.yml.
# The reason for the indirection layer and the split in two workflows is that
# we have different events triggering the check. GitHub seems to treat each
# trigger as an independent instance, ending up in a state where a successful
# check won't override a previously failed check from a different trigger.

name: Enforce 2 collaborator reviews for fork PRs

on:
  workflow_call:
    inputs:
      pr_number:
        required: true
        type: number

permissions:
  pull-requests: read

jobs:
  enforce-reviews:
    runs-on: self-hosted
    steps:
      - name: Fetch PR info
        run: |
          REPO="${{ github.repository }}"
          PR_JSON=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$REPO/pulls/${{ inputs.pr_number }}")
          LATEST_SHA=$(echo "$PR_JSON" | jq -r .head.sha)
          PR_REPO=$(echo "$PR_JSON" | jq -r .head.repo.full_name)
          IS_FORK=$([[ "$PR_REPO" == "$REPO" ]] && echo false || echo true)
          echo "LATEST_SHA=$LATEST_SHA" | tee -a $GITHUB_ENV
          echo "IS_FORK=$IS_FORK" | tee -a $GITHUB_ENV

      - name: Check reviewers
        if: env.IS_FORK == 'true'
        run: |
          REPO="${{ github.repository }}"
          PR_NUMBER=${{ inputs.pr_number }}
          REVIEWS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER/reviews")

          # Filter to latest commit and valid collaborator approvals
          COUNT=$(echo "$REVIEWS" | jq --arg sha "$LATEST_SHA" '
          [group_by(.user.login)[] | last] |
          map(select(
            .state == "APPROVED" and
            (.author_association == "COLLABORATOR" or .author_association == "MEMBER") and
            .commit_id == $sha
          )) |
          length')

          echo "Collaborator/member approvals for latest commit ($LATEST_SHA): $COUNT"
          if [ "$COUNT" -lt 2 ]; then
          echo "‚ùå PR from fork requires 2 collaborator approvals on the latest commit."
          echo ""
          echo "API Output for debug:"
          echo "---------------------------------------------------------------"
          echo "$REVIEWS"
          echo "---------------------------------------------------------------"
          exit 1
          fi
